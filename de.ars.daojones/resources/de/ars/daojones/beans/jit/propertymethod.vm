#set($property = $method.Property)
#set($bean = $property.Bean)
#set($nonGenericType = $util.toNonGenericType($property.Type))
#set($objectType = $util.toObjectType($nonGenericType))
#set($defaultValue = $util.toDefaultValue($nonGenericType))
#set($strategy = $property.Strategy)
#if($util.isEmpty($strategy))
  #set($strategy = $bean.Strategy)
#end
#set($cached = ($!strategy != "ALWAYS"))
#set($commit = ($!strategy == "IMMEDIATELY"))
#set($throwsDataAccessException = $method.ExceptionTypes.contains("de.ars.daojones.runtime.DataAccessException"))
#set($throwsFieldAccessException = $method.ExceptionTypes.contains("de.ars.daojones.FieldAccessException"))
{
  try {
    #if($util.isEmpty($property.Column.Selector))
      final de.ars.daojones.annotations.ColumnSelector selector = null;
    #else
      final de.ars.daojones.annotations.ColumnSelector selector = new ${property.Column.Selector.Name}();
    #end
			    final String columnName = "$property.Column.Value";
			    final de.ars.daojones.annotations.Transformer transformer = 
    #if($util.isEmpty($property.Transformer))
      new de.ars.daojones.annotations.DefaultTransformer(${objectType}.class);
    #else
      ${property.Transformer}.class.newInstance();
    #end 
    #if($method.type == "GETTER")
      final ${objectType} result = (${objectType}) transformer.getFieldValue(
        delegate.getFieldValue(columnName, transformer.getDatabaseType(), $cached, selector), 
        columnName, 
        this
      );
      if(null != result) {
        return $util.toReturnType($nonGenericType, "result");
      } else {
        return $defaultValue;
      }
    #else
      delegate.setFieldValue(
        columnName, 
        transformer.getDatabaseType(), 
        transformer.setFieldValue($util.toObject($nonGenericType, "$1"), columnName, this, $commit), 
        $cached, 
        $commit, 
        selector
      );
    #end
  } catch(de.ars.daojones.FieldAccessException e) {
			    java.util.logging.Logger.getLogger("$util.loggerName(${bean})").log(
			      java.util.logging.Level.SEVERE, 
			      "Unable to read column value for property \"$util.toFirstUpperCase($property.Name)\"!", 
			      e
			    );
    #if($throwsFieldAccessException)
      throw e;
    #else
      #if($throwsDataAccessException)
        throw new DataAccessException(e);
      #else
        #if($method.type == "GETTER")
          return $defaultValue;
        #end
      #end
    #end
  } catch(de.ars.daojones.runtime.DataAccessException e) {
			    java.util.logging.Logger.getLogger("$util.loggerName(${bean})").log(
			      java.util.logging.Level.SEVERE, 
			      "Unable to read column value for property \"$util.toFirstUpperCase($property.Name)\"!", 
			      e
			    );
    #if($throwsDataAccessException)
      throw e;
    #else
      #if($method.type == "GETTER")
        return $defaultValue;
      #end
    #end
  } catch(RuntimeException e) {
			    throw e;
  }
}