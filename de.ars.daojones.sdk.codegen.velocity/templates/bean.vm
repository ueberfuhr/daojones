package $bean.PackageName;
/* ***************************************************************************
 * Generator: DaoJones Bean Code Generator                                   *
 *                                                                           *
 * This class is generated automatically.                                    *
 * Do not change it manually, otherwise your changes might be overwritten.   *
 *************************************************************************** */

import de.ars.daojones.FieldAccessException;
import de.ars.daojones.FieldAccessor;
import de.ars.daojones.annotations.Inheritations;
import de.ars.daojones.runtime.DataAccessException;
import de.ars.daojones.runtime.DataObject;
import de.ars.daojones.runtime.DataObjectContainer;

import java.util.logging.Level;
import java.util.logging.Logger;

/**
 * This class is the DaoJones implementation of {@link $bean.Name}.
 * @author DaoJones Bean Generator
 * @noinstantiate This class is not intended to be instantiated by clients.
$util.join($bean.TypeParameters, "typeParameter", "@param <${esc.d()}typeParameter.Name>"," * ", "$esc.nl() * ", "")
 */
@Inheritations("$bean.InheritationsFile")
$util.join($bean.Modifiers, "modifier", "${esc.d()}modifier.toString().toLowerCase()","", " ", " ")class ${bean.Name}_DaoJones_Impl$util.join($bean.TypeParameters, "typeParameter", "${esc.d()}typeParameter.Name${esc.h()}if(${esc.d()}util.isEmpty(${esc.d()}typeParameter.Supertype) == false) extends ${esc.d()}typeParameter.Supertype${esc.h()}end","<", ",", ">") 
    #if($bean.Interface)implements#{else}extends#end $bean.Name$util.join($bean.TypeParameters, "typeParameter", "${esc.d()}typeParameter.Name","<", ",", ">") {

  private static final Logger logger = Logger.getLogger(${bean.Name}.class.getName());
  private static final long serialVersionUID = 1L;
  private DataObjectContainer delegate = new DataObjectContainer(this);

  /**
   * @see java.lang.Object${esc.h()}equals(java.lang.Object)
   */
#if($util.isEmpty($bean.TypeParameters) == false)
  @SuppressWarnings("unchecked")
#end
  public boolean equals(Object obj) {
    // issues of deserialization
    return delegate.equals(obj);
  }

  /**
   * @see de.ars.daojones.runtime.Dao${esc.h()}getApplicationContextId()
   */
  public String getApplicationContextId() {
    return delegate.getApplicationContextId();
  }

  /**
   * @see de.ars.daojones.runtime.Dao${esc.h()}getDataObject()
   */
  public DataObject getDataObject() {
    return delegate.getDataObject();
  }

  /**
   * @see de.ars.daojones.runtime.Dao${esc.h()}getFieldAccessor()
   */
  public FieldAccessor getFieldAccessor() {
    return delegate.getFieldAccessor();
  }

  /**
   * @see java.lang.Object${esc.h()}hashCode()
   */
  public int hashCode() {
    // issues of deserialization
    if(null == delegate) return 0;
    return delegate.hashCode();
  }

  /**
   * @see de.ars.daojones.runtime.Dao${esc.h()}isNew()
   */
  public boolean isNew() {
    return delegate.isNew();
  }

  /**
   * @see de.ars.daojones.runtime.Dao${esc.h()}onCreate()
   */
  public void onCreate() throws DataAccessException {
   #if(($bean.OnCreateImplemented) == false) //#end super.onCreate();
    delegate.onCreate();
  }

  /**
   * @see de.ars.daojones.runtime.Dao${esc.h()}onDelete()
   */
  public void onDelete() throws DataAccessException {
   #if(($bean.OnDeleteImplemented) == false) //#end super.onDelete();
    delegate.onDelete();
  }

  /**
   * @see de.ars.daojones.runtime.Dao${esc.h()}onUpdate()
   */
  public void onUpdate() throws DataAccessException {
   #if(($bean.OnUpdateImplemented) == false) //#end super.onUpdate();
    delegate.onUpdate();
  }

  /**
   * @see de.ars.daojones.runtime.Dao${esc.h()}refresh()
   */
  public void refresh() throws DataAccessException {
    logger.log(Level.FINER, "Refreshing object with id \"" 
      + (null != getDataObject() ? getDataObject().getIdentificator() : null) 
      + "\"");
   #if(($bean.RefreshImplemented) == false) //#end super.refresh();
    delegate.refresh();
  }

  /**
   * @see de.ars.daojones.runtime.Dao${esc.h()}setApplicationContextId(java.lang.String)
   */
  public void setApplicationContextId(String applicationContextId) {
    delegate.setApplicationContextId(applicationContextId);
  }

  /**
   * @see de.ars.daojones.runtime.Dao${esc.h()}setDataObject(de.ars.daojones.runtime.DataObject)
   */
  public void setDataObject(DataObject dataObject) throws DataAccessException {
    delegate.setDataObject(dataObject);
  }

  /**
   * @see java.lang.Object${esc.h()}toString()
   */
  public String toString() {
    return delegate.toString();
  }

  /**
   * @see DataObjectContainer${esc.h()}update()
   * @throws DataAccessException
   */
  public void update() throws DataAccessException {
    delegate.update();
  }

  /* *************************************************************** 
   *   B E A N   P R O P E R T Y   I M P L E M E N T A T I O N S   *
   *************************************************************** */

#foreach($property in $bean.Properties)
#set($getter = $property.Getter)
#set($setter = $property.Setter)
#set($nonGenericType = $util.toNonGenericType($property.Type))
#set($objectType = $util.toObjectType($nonGenericType))
#set($defaultValue = $util.toDefaultValue($nonGenericType))
#set($cached = ($!property.Strategy != "ALWAYS"))
#set($commit = ($!property.Strategy == "IMMEDIATELY"))
#if($util.isEmpty($getter) == false)
  #set($mods = $util.join($getter.Modifiers, "modifier", "${esc.d()}modifier.toString().toLowerCase()","", " ", " "))
  #set($exs = $util.join($getter.ExceptionTypes, "ex", "${esc.d()}ex","throws ", ", ", " "))
  #set($throwsDataAccessException = $getter.ExceptionTypes.contains("de.ars.daojones.runtime.DataAccessException"))
  #set($throwsFieldAccessException = $getter.ExceptionTypes.contains("de.ars.daojones.FieldAccessException"))
  /**
   * @see ${bean.Name}${esc.h()}#if($property.Type == "boolean")is#{else}get#end$util.toFirstUpperCase($property.Name)()
   */
##if($nonGenericType != $property.Type)
  @SuppressWarnings("unchecked")
##end
  ${mods}$property.Type #if($property.Type == "boolean")is#{else}get#end$util.toFirstUpperCase($property.Name)() ${exs}{
    try {
      final de.ars.daojones.annotations.Transformer transformer 
        = #if($util.isEmpty($property.Transformer))new de.ars.daojones.annotations.DefaultTransformer(${objectType}.class);#{else}${property.Transformer}.class.newInstance();#end 
      final ${objectType} result = (${objectType}) transformer.getFieldValue(
        delegate.getFieldValue("$property.Column", transformer.getDatabaseType(), $cached), 
        "$property.Column", 
        this
      );
      return null != result ? result : $defaultValue; 
    } catch(FieldAccessException e) {
      logger.log(Level.SEVERE, "Unable to read column value for property \"$util.toFirstUpperCase($property.Name)\"!", e);
#if($throwsFieldAccessException)
      throw e;
#{else}#if($throwsDataAccessException)
      throw new DataAccessException(e);
#{else}
      return $defaultValue;
#end
#end
    } catch(RuntimeException e) {
      logger.log(Level.SEVERE, "Unable to read column value for property \"$util.toFirstUpperCase($property.Name)\"!", e);
      throw e;
    } catch(Exception e) {
      logger.log(Level.SEVERE, "Unable to read column value for property \"java.util.Collection.class\"!", e);
      return $defaultValue;
    }
  }
#end
#if($util.isEmpty($setter) == false)
  #set($mods = $util.join($setter.Modifiers, "modifier", "${esc.d()}modifier.toString().toLowerCase()","", " ", " "))
  #set($exs = $util.join($setter.ExceptionTypes, "ex", "${esc.d()}ex","throws ", ", ", " "))
  #set($throwsDataAccessException = $setter.ExceptionTypes.contains("de.ars.daojones.runtime.DataAccessException"))
  #set($throwsFieldAccessException = $setter.ExceptionTypes.contains("de.ars.daojones.FieldAccessException"))
  /**
   * @see ${bean.Name}${esc.h()}set$util.toFirstUpperCase($property.Name)($nonGenericType)
   */
  @SuppressWarnings("unchecked")
  ${mods}void set$util.toFirstUpperCase($property.Name)($property.Type value) ${exs}{
    try {
      final de.ars.daojones.annotations.Transformer transformer 
        = #if($util.isEmpty($property.Transformer))new de.ars.daojones.annotations.DefaultTransformer(${objectType}.class);#{else}${property.Transformer}.class.newInstance();#end 
      delegate.setFieldValue(
        "$property.Column", 
        transformer.getDatabaseType(), 
        transformer.setFieldValue(value, "$property.Column", this, $commit), 
        $cached, 
        $commit
      );
    } catch(FieldAccessException e) {
      logger.log(Level.SEVERE, "Unable to update column value for property \"$util.toFirstUpperCase($property.Name)\"!", e);
#if($throwsFieldAccessException)
      throw e;
#{else}#if($throwsDataAccessException)
      throw new DataAccessException(e);
#end
#end
    } catch(RuntimeException e) {
      logger.log(Level.SEVERE, "Unable to update column value for property \"$util.toFirstUpperCase($property.Name)\"!", e);
      throw e;
    } catch(Exception e) {
      logger.log(Level.SEVERE, "Unable to update column value for property \"$util.toFirstUpperCase($property.Name)\"!", e);
    } 
  }
#end
#end
  /* *************************************************************** 
   *   C O N S T R U C T O R   I M P L E M E N T A T I O N S   *
   *************************************************************** */  

  {
#foreach($property in $bean.Properties)
#set($nonGenericType = $util.toNonGenericType($property.Type))
#set($objectType = $util.toObjectType($nonGenericType))
#if($property.Strategy == "IMMEDIATELY")
    try {
			      delegate.setImmediatelyField("$property.Column", #{if}($util.isEmpty($property.Transformer))${objectType}.class#{else}(Class<?>)${property.Transformer}.class.getMethod("getDatabaseType").invoke(${property.Transformer}.class.newInstance())#{end});
    } catch (Throwable t) {
			      logger.log(Level.WARNING, "Unable to register property \"${property.Name}\" as an immediately loaded property!", t);
		    }
#end
#end
    try {
      delegate.reloadFields();
    } catch (FieldAccessException e) {
      logger.log(Level.WARNING, 
      "Unable to load fields immediately for bean of type \"${bean.PackageName}.$bean.Name\"!",
      e);
    }
  }

#foreach($constructor in $bean.Constructors)
  #set($mods = $util.join($constructor.Modifiers, "modifier", "${esc.d()}modifier.toString().toLowerCase()","", " ", " "))
  #set($exs = $util.join($constructor.ExceptionTypes, "ex", "${esc.d()}ex","throws ", ", ", " "))
  #set($paramDefs = $util.join($constructor.ParameterTypes, "param", "${esc.d()}param arg${esc.d()}idx","", ", ", ""))
  #set($params = $util.join($constructor.ParameterTypes, "param", "arg${esc.d()}idx","", ", ", ""))
  #set($paramsTypes = $util.join($constructor.ParameterTypes, "param", "${esc.d()}util.toNonGenericType(${esc.d()}param)","", ",", ""))
  /**
   * @see ${bean.Name}${esc.h()}${bean.Name}($paramsTypes)
   */
  ${mods}DaoJones${bean.Name}( $paramDefs ) ${exs}{
    super( $params );
  }
  
#end
}
